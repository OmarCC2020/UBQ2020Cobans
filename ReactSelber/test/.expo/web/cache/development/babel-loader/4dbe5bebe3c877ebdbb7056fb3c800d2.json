{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Dokumente\\\\Development\\\\UBQ\\\\UBQ2020Cobans\\\\ReactSelber\\\\test\\\\node_modules\\\\react-native-circular-progress\\\\src\\\\CircularProgress.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport { Svg, Path, G } from 'react-native-svg';\n\nvar CircularProgress = function (_React$PureComponent) {\n  _inherits(CircularProgress, _React$PureComponent);\n\n  var _super = _createSuper(CircularProgress);\n\n  function CircularProgress() {\n    var _this;\n\n    _classCallCheck(this, CircularProgress);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.clampFill = function (fill) {\n      return Math.min(100, Math.max(0, fill));\n    };\n\n    return _this;\n  }\n\n  _createClass(CircularProgress, [{\n    key: \"polarToCartesian\",\n    value: function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n      var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n      return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n      };\n    }\n  }, {\n    key: \"circlePath\",\n    value: function circlePath(x, y, radius, startAngle, endAngle) {\n      var start = this.polarToCartesian(x, y, radius, endAngle * 0.9999);\n      var end = this.polarToCartesian(x, y, radius, startAngle);\n      var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n      var d = ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y];\n      return d.join(' ');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          size = _this$props.size,\n          width = _this$props.width,\n          backgroundWidth = _this$props.backgroundWidth,\n          tintColor = _this$props.tintColor,\n          backgroundColor = _this$props.backgroundColor,\n          style = _this$props.style,\n          rotation = _this$props.rotation,\n          lineCap = _this$props.lineCap,\n          arcSweepAngle = _this$props.arcSweepAngle,\n          fill = _this$props.fill,\n          children = _this$props.children,\n          childrenContainerStyle = _this$props.childrenContainerStyle,\n          padding = _this$props.padding,\n          renderCap = _this$props.renderCap,\n          dashedBackground = _this$props.dashedBackground;\n      var maxWidthCircle = backgroundWidth ? Math.max(width, backgroundWidth) : width;\n      var sizeWithPadding = size / 2 + padding / 2;\n      var radius = size / 2 - maxWidthCircle / 2 - padding / 2;\n      var backgroundPath = this.circlePath(sizeWithPadding, sizeWithPadding, radius, 0, arcSweepAngle);\n      var currentFillAngle = arcSweepAngle * this.clampFill(fill) / 100;\n      var circlePath = this.circlePath(sizeWithPadding, sizeWithPadding, radius, 0, currentFillAngle);\n      var coordinate = this.polarToCartesian(sizeWithPadding, sizeWithPadding, radius, currentFillAngle);\n      var cap = this.props.renderCap ? this.props.renderCap({\n        center: coordinate\n      }) : null;\n      var offset = size - maxWidthCircle * 2;\n\n      var localChildrenContainerStyle = _objectSpread({}, {\n        position: 'absolute',\n        left: maxWidthCircle + padding / 2,\n        top: maxWidthCircle + padding / 2,\n        width: offset,\n        height: offset,\n        borderRadius: offset / 2,\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'hidden'\n      }, {}, childrenContainerStyle);\n\n      var dashedBackgroundStyle = dashedBackground.gap > 0 ? dashedBackground : {\n        width: 0,\n        gap: 0\n      };\n      var strokeDasharray = dashedBackground.gap > 0 ? Object.values(dashedBackgroundStyle).map(function (value) {\n        return parseInt(value);\n      }) : null;\n      return React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      }, React.createElement(Svg, {\n        width: size + padding,\n        height: size + padding,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, React.createElement(G, {\n        rotation: rotation,\n        originX: (size + padding) / 2,\n        originY: (size + padding) / 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, backgroundColor && React.createElement(Path, {\n        d: backgroundPath,\n        stroke: backgroundColor,\n        strokeWidth: backgroundWidth || width,\n        strokeLinecap: lineCap,\n        strokeDasharray: strokeDasharray,\n        fill: \"transparent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }\n      }), fill > 0 && React.createElement(Path, {\n        d: circlePath,\n        stroke: tintColor,\n        strokeWidth: width,\n        strokeLinecap: lineCap,\n        fill: \"transparent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }\n      }), cap)), children && React.createElement(View, {\n        style: localChildrenContainerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 22\n        }\n      }, children(fill)));\n    }\n  }]);\n\n  return CircularProgress;\n}(React.PureComponent);\n\nexport { CircularProgress as default };\nCircularProgress.propTypes = {\n  style: ViewPropTypes.style,\n  size: PropTypes.number.isRequired,\n  fill: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  backgroundWidth: PropTypes.number,\n  tintColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  rotation: PropTypes.number,\n  lineCap: PropTypes.string,\n  arcSweepAngle: PropTypes.number,\n  children: PropTypes.func,\n  childrenContainerStyle: ViewPropTypes.style,\n  padding: PropTypes.number,\n  renderCap: PropTypes.func,\n  dashedBackground: PropTypes.object\n};\nCircularProgress.defaultProps = {\n  tintColor: 'black',\n  rotation: 90,\n  lineCap: 'butt',\n  arcSweepAngle: 360,\n  padding: 0,\n  dashedBackground: {\n    width: 0,\n    gap: 0\n  }\n};","map":{"version":3,"sources":["D:/Dokumente/Development/UBQ/UBQ2020Cobans/ReactSelber/test/node_modules/react-native-circular-progress/src/CircularProgress.js"],"names":["React","PropTypes","Svg","Path","G","CircularProgress","clampFill","fill","Math","min","max","centerX","centerY","radius","angleInDegrees","angleInRadians","PI","x","cos","y","sin","startAngle","endAngle","start","polarToCartesian","end","largeArcFlag","d","join","props","size","width","backgroundWidth","tintColor","backgroundColor","style","rotation","lineCap","arcSweepAngle","children","childrenContainerStyle","padding","renderCap","dashedBackground","maxWidthCircle","sizeWithPadding","backgroundPath","circlePath","currentFillAngle","coordinate","cap","center","offset","localChildrenContainerStyle","position","left","top","height","borderRadius","alignItems","justifyContent","overflow","dashedBackgroundStyle","gap","strokeDasharray","Object","values","map","value","parseInt","PureComponent","propTypes","ViewPropTypes","number","isRequired","string","func","object","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, ViewPropTypes } from 'react-native';\r\nimport { Svg, Path, G } from 'react-native-svg';\r\n\r\nexport default class CircularProgress extends React.PureComponent {\r\n  polarToCartesian(centerX, centerY, radius, angleInDegrees) {\r\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\r\n    return {\r\n      x: centerX + radius * Math.cos(angleInRadians),\r\n      y: centerY + radius * Math.sin(angleInRadians),\r\n    };\r\n  }\r\n\r\n  circlePath(x, y, radius, startAngle, endAngle) {\r\n    var start = this.polarToCartesian(x, y, radius, endAngle * 0.9999);\r\n    var end = this.polarToCartesian(x, y, radius, startAngle);\r\n    var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\r\n    var d = ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y];\r\n    return d.join(' ');\r\n  }\r\n\r\n  clampFill = fill => Math.min(100, Math.max(0, fill));\r\n\r\n  render() {\r\n    const {\r\n      size,\r\n      width,\r\n      backgroundWidth,\r\n      tintColor,\r\n      backgroundColor,\r\n      style,\r\n      rotation,\r\n      lineCap,\r\n      arcSweepAngle,\r\n      fill,\r\n      children,\r\n      childrenContainerStyle,\r\n      padding,\r\n      renderCap,\r\n      dashedBackground,\r\n    } = this.props;\r\n\r\n    const maxWidthCircle = backgroundWidth ? Math.max(width, backgroundWidth) : width;\r\n    const sizeWithPadding = size / 2 + padding / 2;\r\n    const radius = size / 2 - maxWidthCircle / 2 - padding / 2;\r\n\r\n    const backgroundPath = this.circlePath(\r\n      sizeWithPadding,\r\n      sizeWithPadding,\r\n      radius,\r\n      0,\r\n      arcSweepAngle\r\n    );\r\n    const currentFillAngle = (arcSweepAngle * this.clampFill(fill)) / 100;\r\n    const circlePath = this.circlePath(\r\n      sizeWithPadding,\r\n      sizeWithPadding,\r\n      radius,\r\n      0,\r\n      currentFillAngle\r\n    );\r\n    const coordinate = this.polarToCartesian(\r\n      sizeWithPadding,\r\n      sizeWithPadding,\r\n      radius,\r\n      currentFillAngle\r\n    );\r\n    const cap = this.props.renderCap ? this.props.renderCap({ center: coordinate }) : null;\r\n\r\n    const offset = size - maxWidthCircle * 2;\r\n\r\n    const localChildrenContainerStyle = {\r\n      ...{\r\n        position: 'absolute',\r\n        left: maxWidthCircle + padding / 2,\r\n        top: maxWidthCircle + padding / 2,\r\n        width: offset,\r\n        height: offset,\r\n        borderRadius: offset / 2,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        overflow: 'hidden',\r\n      },\r\n      ...childrenContainerStyle,\r\n    }\r\n\r\n    const dashedBackgroundStyle = dashedBackground.gap > 0\r\n      ? dashedBackground\r\n      : { width:0, gap:0 };\r\n\r\n    const strokeDasharray = dashedBackground.gap > 0 ? \r\n    Object.values(dashedBackgroundStyle)\r\n      .map(value => parseInt(value)) \r\n      : null;\r\n\r\n    return (\r\n      <View style={style}>\r\n        <Svg width={size + padding} height={size + padding}>\r\n          <G rotation={rotation} originX={(size + padding) / 2} originY={(size + padding) / 2}>\r\n            {backgroundColor && (\r\n              <Path\r\n                d={backgroundPath}\r\n                stroke={backgroundColor}\r\n                strokeWidth={backgroundWidth || width}\r\n                strokeLinecap={lineCap}\r\n                strokeDasharray={strokeDasharray}\r\n                fill=\"transparent\"\r\n              />\r\n            )}\r\n            {fill > 0 && (\r\n              <Path\r\n                d={circlePath}\r\n                stroke={tintColor}\r\n                strokeWidth={width}\r\n                strokeLinecap={lineCap}\r\n                fill=\"transparent\"\r\n              />\r\n            )}\r\n            {cap}\r\n          </G>\r\n        </Svg>\r\n        {children && <View style={localChildrenContainerStyle}>{children(fill)}</View>}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nCircularProgress.propTypes = {\r\n  style: ViewPropTypes.style,\r\n  size: PropTypes.number.isRequired,\r\n  fill: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  backgroundWidth: PropTypes.number,\r\n  tintColor: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  rotation: PropTypes.number,\r\n  lineCap: PropTypes.string,\r\n  arcSweepAngle: PropTypes.number,\r\n  children: PropTypes.func,\r\n  childrenContainerStyle: ViewPropTypes.style,\r\n  padding: PropTypes.number,\r\n  renderCap: PropTypes.func,\r\n  dashedBackground: PropTypes.object,\r\n};\r\n\r\nCircularProgress.defaultProps = {\r\n  tintColor: 'black',\r\n  rotation: 90,\r\n  lineCap: 'butt',\r\n  arcSweepAngle: 360,\r\n  padding: 0,\r\n  dashedBackground: { width: 0, gap: 0 },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}